{"version":3,"file":"screenshot.phantomjs.js","sourceRoot":"","sources":["../src/screenshot.phantomjs.ts"],"names":[],"mappings":"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","sourcesContent":["import * as webpage from 'webpage'\nimport * as system from 'system'\nimport * as fs from 'fs'\n\nimport isJson from './is-json'\nimport sanitizePath from './sanitize-path'\n\nvar page: any = webpage.create()\n\nconsole.error = (error: string) => {\n    system.stderr.write(error + '\\n')\n}\n\nconst pathsFilepath: string = system.args[1] || ''\nconst domain: string = system.args[2] || ''\nconst environment: string = system.args[3] || ''\n\nif (!environment) {\n    console.error('Please specify a environment!')\n    phantom.exit()\n}\n\nif (!domain) {\n    console.error('Please specify a domain!')\n    phantom.exit()\n}\n\nif (!pathsFilepath) {\n    console.error('Please specify a filepath to paths!')\n    phantom.exit()\n}\n\nvar rawPaths: string = fs.read(pathsFilepath)\n\nif (!rawPaths) {\n    console.error('No content found inside ' + pathsFilepath)\n    phantom.exit()\n}\n\nvar paths: string[]\n\nif (isJson(rawPaths)) {\n    paths = JSON.parse(rawPaths)\n} else {\n    console.error('Parsing JSON Failed!')\n    phantom.exit()\n}\n\nif (!Array.isArray(paths)) {\n    console.log('paths content must be a type of [Object array]')\n}\n\nconst page_width = 1600\nconst page_height = 1800\n\npage.viewportSize = { width: page_width, height: page_height }\npage.clipRect = { top: 0, left: 0, width: page_width, height: page_height }\npage.onError = (messageStack: string, trace: string|any[]) => {}\n\nvar pathCollection: string[] = []\n\nvar count: number = 0\n\nfunction handlePage() {\n\n    var url: string = domain + paths[count]\n\n    console.log(url)\n\n    page.open(url, (status: string) => {\n        if (status !== 'success') {\n            console.error('Failed loading: ' + url)\n            nextPage()\n        }\n\n\n        // Set page height\n        // var height: number = page.evaluate(() => {\n        //     var body = document.body,\n        //         html = document.documentElement\n\n        //     return Math.max(\n        //         body.scrollHeight, \n        //         body.offsetHeight, \n        //         html.clientHeight, \n        //         html.scrollHeight, \n        //         html.offsetHeight\n        //     )\n        // })\n\n        // page.viewportSize['height'] = height\n        // page.clipRect['height'] = height\n\n        var id: string = sanitizePath(paths[count])\n        var output: string = `screenshots/${environment}/${id}_${page_width}x${page_height}.png`\n\t\t\n        page.render(output)\n        pathCollection.push(output)\n\n\t\tcount++\n        nextPage()\n    })\n}\n\nfunction nextPage() {\n    if (typeof paths[count] === 'undefined') {\n        console.log(JSON.stringify(pathCollection))\n        phantom.exit()\n    }\n\n    handlePage() // https://www.google.com/ < do a check for the trailing slash\n}\n\nnextPage()"]}