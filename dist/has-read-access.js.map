{"version":3,"file":"has-read-access.js","sourceRoot":"","sources":["../src/has-read-access.ts"],"names":[],"mappings":";AAAA,uBAAwB;AACxB,kCAAmC;AACnC,IAAM,GAAG,GAAQ,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;AAE1C,uBAAuB,aAAqB;IAC3C,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,aAAa,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,GAAG,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC;SAC1E,IAAI,CAAC,cAAM,OAAA,aAAa,EAAb,CAAa,CAAC;SACzB,KAAK,CAAC,UAAC,KAAa;QACpB,MAAM,CAAC,uBAAqB,aAAe,CAAA;IAC5C,CAAC,CAAC,CAAA;AACJ,CAAC;;AAED,kBAAe,aAAa,CAAA","sourcesContent":["import * as fs from 'fs'\nimport * as Promise from 'bluebird'\nconst fsA: any = Promise.promisifyAll(fs);\n\nfunction hasReadAccess(chunkFilepath: string): Promise<string> {\n\treturn fsA.accessAsync(chunkFilepath, fs.constants.F_OK | fs.constants.R_OK)\n\t\t.then(() => chunkFilepath)\n\t\t.catch((error: string) => {\n\t\t\treturn `No Read access to ${chunkFilepath}`\n\t\t})\n}\n\nexport default hasReadAccess"]}