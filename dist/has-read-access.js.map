{"version":3,"file":"has-read-access.js","sourceRoot":"","sources":["../src/has-read-access.ts"],"names":[],"mappings":";;AAAA,uBAAwB;AACxB,kCAAmC;AACnC,IAAM,GAAG,GAAQ,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;AAE1C,uBAAuB,QAAgB;IACtC,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,GAAG,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC;SACrE,IAAI,CAAC,cAAM,OAAA,QAAQ,EAAR,CAAQ,CAAC;SACpB,KAAK,CAAC,UAAC,KAAa;QACpB,MAAM,CAAC,uBAAqB,QAAU,CAAA;IACvC,CAAC,CAAC,CAAA;AACJ,CAAC;AAED,kBAAe,aAAa,CAAA","sourcesContent":["import * as fs from 'fs'\nimport * as Promise from 'bluebird'\nconst fsA: any = Promise.promisifyAll(fs);\n\nfunction hasReadAccess(filepath: string): Promise<string> {\n\treturn fsA.accessAsync(filepath, fs.constants.F_OK | fs.constants.R_OK)\n\t\t.then(() => filepath)\n\t\t.catch((error: string) => {\n\t\t\treturn `No Read access to ${filepath}`\n\t\t})\n}\n\nexport default hasReadAccess"]}