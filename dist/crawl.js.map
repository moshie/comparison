{"version":3,"file":"crawl.js","sourceRoot":"","sources":["../src/crawl.ts"],"names":[],"mappings":"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","sourcesContent":["// Vendor\nimport * as URL from 'url'\nimport * as chalk from 'chalk'\nimport * as Promise from 'bluebird'\nimport * as Spider from 'node-spider'\nimport Document from 'node-spider/lib/document'\n\n// Internal\nimport chunk from './chunk'\nimport removeHash from './remove-hash'\nimport validProtocol from './valid-protocol'\nimport mergePathname from './merge-pathname'\nimport isAbsoluteUrl from './is-absolute-url'\nimport checkShorthandUrl from './check-shorthand-url'\nimport hasInvalidExtension from './has-invalid-extension'\nimport {environmentsInterface} from './environments-interface'\n\nconst paths: string[] = []\n\nconst checked: string[] = []\n\nfunction handleRequest(spider: Spider, doc: Document, domain: URL.Url): void {\n\n    doc.$('a[href]').each(function (i: number, elem: any) {\n\n        let href: string = doc.$(this).attr('href')\n\n        href = removeHash(href)\n\n        if (!validProtocol(href) || checked.indexOf(href) !== -1 || hasInvalidExtension(href)) {\n            return true\n        }\n\n        checked.push(href)\n\n        if (isAbsoluteUrl(domain, href)) {\n            // Absolute\n            var url: string = checkShorthandUrl(href)\n            href = URL.parse(url).pathname\n            href = href.replace(/^(\\/)/, '')\n            var next: string = url\n        } else {\n            if (/^(https?\\:\\/\\/)/.test(href)) {\n                return true;\n            }\n            // Relative\n            href = href.replace(/^(\\/)/, '')\n            var next: string = mergePathname(domain, href)\n        }\n\n        if (paths.indexOf(href) !== -1) {\n            return true\n        }\n\n        paths.push(href)\n\n        spider.queue(next, (doc: Document) => handleRequest(spider, doc, domain))\n        \n    })\n}\n\n\nfunction crawl(environments: environmentsInterface): Promise<any> {\n    const url: string = environments[Object.keys(environments)[0]]\n    const domain: URL.Url = URL.parse(url)\n\n    console.log(`${chalk.cyan('Info:')} Crawling ${chalk.bgBlue(url)}`)\n\n    return new Promise((resolve, reject) => {\n        \n        const spider: Spider = new Spider({\n            concurrent: 20,\n            error: (error: Error, url: string) => {\n                console.log(`${chalk.red('Error:')} ${error.message}`)\n                reject(error)\n            },\n            done: () => {\n                console.log(`${chalk.green('Success:')} Crawling of ${url} is complete!`)\n                resolve(chunk(paths, 6))\n            },\n            headers: { \n                'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36' \n            }\n        })\n\n        spider.queue(URL.format(domain), (doc: Document) => handleRequest(spider, doc, domain))\n    })\n\n}\n\nexport default crawl\n"]}