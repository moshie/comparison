{"version":3,"file":"phantom-shell.js","sourceRoot":"","sources":["../src/phantom-shell.ts"],"names":[],"mappings":";;AAAA,+CAA4C;AAC5C,kCAAmC;AACnC,qCAA8B;AAC9B,2BAA4B;AAC5B,6BAA8B;AAE9B,IAAM,cAAc,GAAa,CAAC,SAAS,EAAE,IAAI,EAAE,cAAc,EAAE,MAAM,EAAE,WAAW,CAAC,CAAA;AACvF,IAAM,UAAU,GAAW,IAAI,CAAC,OAAO,OAAZ,IAAI,EAAY,cAAc,CAAC,CAAA;AAE1D,oBAAoB,aAAqB,EAAE,MAAc,EAAE,WAAmB;IAE1E,IAAM,oBAAoB,GAAW,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,yBAAyB,CAAC,CAAA;IAE1F,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;QAC5B,IAAM,OAAO,GAAG,qBAAK,CAAC,UAAU,EAAE,CAAC,oBAAoB,EAAE,aAAa,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC,CAAA;QAE7F,IAAI,KAAe,CAAA;QAEnB,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAC,IAAgB;YACvC,IAAI,GAAG,GAAW,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;YAEvC,EAAE,CAAC,CAAC,iBAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACd,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;YAC3B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,GAAG,CAAC,CAAA;YAC5C,CAAC;QACL,CAAC,CAAC,CAAA;QAEF,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAC,IAAgB;YACvC,IAAI,OAAO,GAAW,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;YAC3C,MAAM,CAAC,OAAO,CAAC,CAAA;QACnB,CAAC,CAAC,CAAA;QAEF,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,IAAY;YAC7B,OAAO,CAAC,KAAK,CAAC,CAAA;QAClB,CAAC,CAAC,CAAA;IAEN,CAAC,CAAC,CAAA;AACN,CAAC;AAED,kBAAe,UAAU,CAAA","sourcesContent":["import {spawn as shell} from 'child_process'\nimport * as Promise from 'bluebird'\nimport isJson from './is-json'\nimport * as path from 'path'\nimport * as chalk from 'chalk'\n\nconst phantomCLIPath: string[] = [__dirname, '..', 'node_modules', '.bin', 'phantomjs']\nconst phantomCLI: string = path.resolve(...phantomCLIPath)\n\nfunction screenshot(chunkFilepath: string, domain: string, environment: string): Promise<any> {\n\n    const screenshotScriptPath: string = path.resolve(__dirname, 'screenshot.phantomjs.js')\n\n\treturn new Promise((resolve, reject) => {\n        const phantom = shell(phantomCLI, [screenshotScriptPath, chunkFilepath, domain, environment])\n\n        let paths: string[]\n\n        phantom.stdout.on('data', (data: NodeBuffer) => {\n            var out: string = data.toString('utf8')\n\n            if (isJson(out)) {\n                paths = JSON.parse(out)\n            } else {\n            \tconsole.log(chalk.blue('Rendering: '), out)\n            }\n        })\n\n        phantom.stderr.on('data', (data: NodeBuffer) => {\n            var message: string = data.toString('utf8')\n            reject(message)\n        })\n\n        phantom.on('close', (code: number) => {\n            resolve(paths)\n        })\n\n    })\n}\n\nexport default screenshot"]}