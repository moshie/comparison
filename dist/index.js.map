{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport * as program from 'commander'\nimport {environmentsInterface} from './environments-interface'\nimport * as path from 'path'\nimport * as Promise from 'bluebird'\nimport * as fileSystem from 'fs'\nconst fs: any = Promise.promisifyAll(fileSystem)\n\nimport chunk from './chunk'\nimport multiShot from './multi-shot'\nimport folderComparison from './folder-comparison'\nimport {screenShotsValidation} from './validation'\nimport writeChunkToFile from './write-chunk-to-file'\nimport sanitizeEnvironments from './sanitize-environments'\nimport makeComparisonFolder from './make-comparison-folder'\nimport checkPathsAreDirectories from './check-paths-are-directories'\nconst version = require('../package').version;\n\n\nimport * as URL from 'url'\nimport * as Spider from 'node-spider'\n\n\n\nfunction crawl(environments: environmentsInterface): Promise<string[]> {\n\n\tfor (var environment in environments) break;\n\n\tconst paths: string[] = []\n\n\tconst domain = URL.parse(environments[environment])\n\n\treturn new Promise((resolve, reject) => {\n\t\t\n\t\tconst spider = new Spider({\n\t\t\tconcurrent: 5,\n\t\t\tdone: function () {\n\t\t\t\tresolve(paths)\n\t\t\t}\n\t\t});\n\t\tspider.queue(URL.format(domain), function handleRequest(doc: any) {\n\n\t\t\tdoc.$(`a[href]`).each(function (i: number, elem: any) {\n\t\t\t\tlet href = doc.$(elem).attr('href')\n\t\t\t\tif (paths.includes(href)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tvar relativeRegex = new RegExp('^(https?\\:\\/\\/(www\\.)?' + domain.host + ')|^(\\/\\w?.*)')\n\n\t\t\t\tif (relativeRegex.test(href)) {\n\t\t\t\t\tif (/^(\\/)/.test(href)) {\n\t\t\t\t\t\tif (href[0] == '/') {\n\t\t\t\t\t\t\thref = href.slice(1)\n\t\t\t\t\t\t}\n\t\t\t\t\t\thref = URL.format(domain) + href;\n\t\t\t\t\t}\n\t\t\t\t\tif (paths.includes(href)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tpaths.push(href)\n\t\t\t\t\tspider.queue(href, handleRequest)\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t})\n\t\n\n}\n\n// `shutter screenshots master=https://google.com development=https://dev.google.com test=https://test.google.com —config=~/config.yaml`\n\nprogram\n    .version(version)\n    .command('screenshots [domains...]')\n    .arguments('-c, --config')\n    .action(function (domains: string[]) {\n        screenShotsValidation(domains)\n        const environments: environmentsInterface = sanitizeEnvironments(domains)\n\n    \t// Ideal setup below\n    \t// crawl(environments)\n    \t// \t.then((paths: string[]) => chunk(paths, 6))\n    \t// \t.map()\n\n\n        crawl(environments)\n        \t// try and make it return the final paths so all I need to do is chunk the paths\n        \t.then((paths: string[]) => {\n        \t\t// remove the domain from the url\n        \t\t// This would be better if it was done at the retreval stage\n\t\t\t\tvar resolved = paths.map((v) => {\n\t\t\t\t\tvar pathname = URL.parse(v).pathname\n\t\t\t\t\tif (pathname[0] == '/') {\n\t\t\t\t\t\tpathname = pathname.slice(1)\n\t\t\t\t\t}\n\t\t\t\t\treturn pathname\n\t\t\t\t})\n\t\t\t\t// Remove duplicates\n\t\t\t\tvar final = resolved.filter((item, pos) => resolved.indexOf(item) == pos)\n\t\t\t\tconsole.log(final);\n    \t\t\tprocess.exit()\n        \t})\n        \t.catch((error: any) => {\n    \t\t\t//console.log(error);\n    \t\t\tprocess.exit()\n        \t})\n\n        // const paths: string[] = [\n        //     '',\n        //     'contact-us',\n        //     'why-choose-us',\n        //     'why-choose-us/faqs',\n        //     'product-category/printing',\n        //     'product-category/litho-and-digital-printing',\n        //     'product-category/printing/large-format-printing',\n        //     'product-category/printing/business-stationery',\n        //     'product-category/printing/brochure-printing-services',\n        //     'product-category/printing/print-processes',\n        //     'product-category/print-sizes',\n        //     'product-category/promotional-products',\n        //     'branded-pens',\n        //     'artwork',\n        //     'office-furniture',\n        //     'signs-displays',\n        //     'exhibition-stand-ideas',\n        //     'exhibition-stands',\n        //     'exhibitions',\n        //     'exhibitions/pop-up-banners'\n        // ]\n\n        //console.log(domains);\n        // process.exit();\n\n        // // Chunk paths \n\n        // const chunks: string[][] = chunk(paths, 6);\n\n        // // loop through each chunk add it to a file `chunk-{index}.json` then for each environment run screenshot:\n\n        // Promise.map(chunks, (chunk: string[], index: number): Promise<string> => {\n        //     let filename: string = path.join(__dirname, `chunk-${index}.json`);\n        //     return writeChunkToFile(filename, JSON.stringify(chunk))\n        //         .then((chunkFilename: string) => multiShot(environments, chunkFilename))\n        //         .then((chunkFilename: string) => fs.unlinkAsync(chunkFilename))\n        // }, {concurrency: 6})\n        //     .catch((error: any) => {\n        //         console.log(error)\n        //     })\n    })\n\n    // `shutter compare master development` <— will compare “prescreenshoted” sites\n    // `shutter compare https://google.com https://dev.google.com` <— will crawl site, take screenshots then compare them\n\n    program\n        .command('compare <original> <comparison>')\n        .action(function (original, comparison) {\n            // Check if urls or paths!!\n\n            const cwd = process.cwd();\n            const comparisonOne = path.join(cwd, original);\n            const comparisonTwo = path.join(cwd, comparison);\n\n            checkPathsAreDirectories(comparisonOne, comparisonTwo)\n                .then(() => makeComparisonFolder(comparisonOne, comparisonTwo))\n                .then(() => folderComparison(comparisonOne, comparisonTwo))\n                .catch((error) => {\n                    console.log(error);\n                });\n        })\n\n\nprogram.parse(process.argv);"]}