{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\n\nimport * as chalk from 'chalk'\nimport * as path from 'path'\nimport * as Promise from 'bluebird'\nimport * as program from 'commander'\nimport * as fileSystem from 'fs'\nconst fs: any = Promise.promisifyAll(fileSystem)\n\nimport chunk from './chunk'\nimport crawl from './crawl'\nimport validator from './validator'\nimport multiShot from './multi-shot'\nimport folderComparison from './folder-comparison'\nimport writeChunkToFile from './write-chunk-to-file'\nimport sanitizeEnvironments from './sanitize-environments'\nimport makeComparisonFolder from './make-comparison-folder'\nimport {environmentsInterface} from './environments-interface'\nimport checkPathsAreDirectories from './check-paths-are-directories'\n\nconst version = require('../package').version;\n\n\n// `shutter screenshots master=https://google.com development=https://dev.google.com test=https://test.google.com —config=~/config.yaml`\n\nprogram\n    .version(version)\n    .command('screenshots [domains...]')\n    .description('take screenshots of specified domains')\n    .arguments('-c, --config')\n    .action(function (domains: string[]) {\n\n    \ttry {\n\t\t\tvalidator(domains)\n\t\t} catch (error) {\n\t\t\tconsole.log(`${chalk.red('Error')}: ${error.message}`);\n\t\t}\n\n        const environments: environmentsInterface = sanitizeEnvironments(domains)\n\n    \tcrawl(environments)\n    \t\t.then((paths: string[]) => chunk(paths, 6))\n    \t\t.map((chunk: string[], index: number): Promise<string> => {\n            let filename: string = path.join(__dirname, `chunk-${index}.json`);\n            return writeChunkToFile(filename, JSON.stringify(chunk))\n                .then((chunkFilename: string) => multiShot(environments, chunkFilename))\n                .then((chunkFilename: string) => fs.unlinkAsync(chunkFilename))\n        }, {concurrency: 6})\n    \t\t.then(() => {\n    \t\t\tconsole.log(chalk.green('Success: ') + 'Screenshots complete!')\n    \t\t})\n            .catch((error: any) => {\n                console.log(error)\n            })\n    })\n\n    // `shutter compare master development` <— will compare “prescreenshoted” sites\n    // `shutter compare https://google.com https://dev.google.com` <— will crawl site, take screenshots then compare them\n\n    program\n        .command('compare <original> <comparison>')\n        .action(function (original, comparison) {\n            // Check if urls or paths!!\n\n            const cwd = process.cwd();\n            const comparisonOne = path.join(cwd, original);\n            const comparisonTwo = path.join(cwd, comparison);\n\n            checkPathsAreDirectories(comparisonOne, comparisonTwo)\n                .then(() => makeComparisonFolder(comparisonOne, comparisonTwo))\n                .then(() => folderComparison(comparisonOne, comparisonTwo))\n                .catch((error) => {\n                    console.log(error);\n                });\n        })\n\n\nprogram.parse(process.argv);"]}