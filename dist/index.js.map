{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\n// Vendor\nimport * as fs from 'fs'\nimport * as path from 'path'\nimport * as chalk from 'chalk'\nimport * as Promise from 'bluebird'\nimport * as program from 'commander'\n\n// Internal\nimport crawl from './crawl'\nimport validator from './validator'\nimport screenshotChunk from './screenshot-chunk'\nimport compareDirectories from './compare-directories'\nimport sanitizeEnvironments from './sanitize-environments'\nimport {environmentsInterface} from './environments-interface'\n\n// Misc\nconst version = require('../package').version\n\nprogram\n    .version(version)\n    .command('screenshots [environments...]')\n    .description('Render screenshots of web pages')\n    .arguments('-c, --config')\n    .action(function (environments: string[]) {\n\n    \t// Validation\n    \ttry {\n\t\t\tvalidator(environments)\n\t\t} catch (error) {\n\t\t\tconsole.log(`\\n${chalk.red('Error:')} ${error.message}\\n`)\n\t\t\tprocess.exit(1)\n\t\t}\n\n\t\t// Sanitize\n        const sanitizedEnvironments: environmentsInterface = sanitizeEnvironments(environments)\n\n        // Crawl -> Screenshot\n    \tcrawl(sanitizedEnvironments)\n            .then((chunks: string[][]) => {\n                console.log(`${chalk.magenta(`In Progress:`)} Capturing paths 🏞`)\n                return chunks\n            })\n    \t\t.map((chunk: string[], index: number): Promise<string> => {\n\t            return screenshotChunk(sanitizedEnvironments, chunk, index)\n\t        }, {concurrency: 6})\n                .then(() => {\n                    console.log(`${chalk.green(`Success:`)}  Paths captured successfully`)\n                })\n\t            .catch((error: Error) => {\n\t                console.log(`${chalk.red('Error:')} ${error.message}`)\n\t            })\n    })\n\n    // `shutter compare master development` <— will compare “prescreenshoted” sites\n    // `shutter compare https://google.com https://dev.google.com` <— will crawl site, take screenshots then compare them\n\n    program\n        .command('compare <original> <comparison>')\n        .action(function (original, comparison) {\n\n            // http://google.com http://dev.google.com\n            // google.com dev.google.com\n            // /master /develop\n\n        \tlet cwd = process.cwd()\n        \tlet comparisonOne = path.join(cwd, original)\n            let comparisonTwo = path.join(cwd, comparison)\n\n            // Check if is a path\n            if (fs.existsSync(comparisonOne) && fs.existsSync(comparisonTwo)) {\n              compareDirectories(comparisonOne, comparisonTwo)\n                .then(() => {\n                    console.log(`${chalk.green(`Success:`)} Sites compared successfully`)\n                })\n                .catch((error: string) => {\n                    console.log(`${chalk.red('Error:')} ${error}`)\n                    process.exit(1)\n                })\n                return\n            }\n\n            // Check if both contain /https?\\:\\/\\// ITS A URL\n            const domains: string[] = [`original=${original}`, `comparison=${comparison}`]\n\n            try {\n                validator(domains)\n            } catch (error) {\n                console.log(`${chalk.red('Error')}: ${error.message}`)\n            }\n\n            const environments: environmentsInterface = sanitizeEnvironments(domains)\n\n            comparisonOne = path.join(cwd, 'original')\n            comparisonTwo = path.join(cwd, 'comparison')\n\n            // Assume url\n            crawl(environments)\n                .then((chunks: string[][]) => {\n                    console.log(`${chalk.magenta(`In Progress:`)} Capturing paths 🏞`)\n                    return chunks\n                })\n                .map((chunk: string[], index: number) => {\n                    return screenshotChunk(environments, chunk, index)\n                }, {concurrency: 6})\n                .then(() => {\n                    console.log(`${chalk.green(`Success:`)} Paths captured successfully`)\n                })\n                .then(() => compareDirectories(comparisonOne, comparisonTwo))\n                .then(() => {\n                    console.log(`${chalk.green(`Success:`)} Sites compared successfully 🏞  <=> 🏞`)\n                })\n                .catch((error: any) => {\n                    if (typeof error === 'object') {\n                        console.log(`${chalk.red('Error:')} ☠️ ${error.message}`)\n                    }\n\n                    console.log(`${chalk.red('Error:')} ☠️ ${error}`)\n                })\n\n        })\n\n\nprogram.parse(process.argv)"]}