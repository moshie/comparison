{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;AAKA,2BAA4B;AAC5B,kCAAmC;AACnC,+BAAgC;AAChC,IAAM,EAAE,GAAQ,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC,CAAA;AAKhD,IAAM,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;AAC1B,IAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;AAChD,IAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;AAE/C;IAAkC,eAAkB;SAAlB,UAAkB,EAAlB,qBAAkB,EAAlB,IAAkB;QAAlB,0BAAkB;;IAChD,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;QAC/B,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,UAAC,IAAY;YAC5B,MAAM,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC;iBACpB,IAAI,CAAC,UAAC,IAAS,IAAK,OAAA,IAAI,CAAC,WAAW,EAAE,EAAlB,CAAkB,CAAC;iBACvC,KAAK,CAAC,UAAC,KAAU;gBACd,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,IAAI,QAAQ,CAAC,CAAC,CAAC;oBACzB,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBACD,MAAM,CAAC,KAAK,CAAC,CAAC;YAClB,CAAC,CAAC,CAAC;QACX,CAAC,CAAC;aACD,IAAI,CAAC,UAAC,UAAqB;YACxB,IAAI,YAAY,GAAW,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACrD,EAAE,CAAC,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBACtB,MAAM,CAAI,KAAK,CAAC,YAAY,CAAC,wBAAqB,CAAC,CAAA;YACvD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,OAAO,CAAC,KAAK,CAAC,CAAA;YAClB,CAAC;QACL,CAAC,CAAC,CAAA;IACN,CAAC,CAAC,CAAA;AACN,CAAC;AAGD,wBAAwB,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,CAAC;KACtD,IAAI,CAAC,UAAC,KAAa;IAIhB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AACvB,CAAC,CAAC;KACD,KAAK,CAAC,UAAC,KAAK;IACT,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC","sourcesContent":["import {environmentsInterface} from './environments-interface'\nimport writeChunkToFile from './write-chunk-to-file'\nimport multiShot from './multi-shot'\nimport chunk from './chunk'\n\nimport * as path from 'path'\nimport * as Promise from 'bluebird'\nimport * as fileSystem from 'fs'\nconst fs: any = Promise.promisifyAll(fileSystem)\n\n// TBA\n// compare copy master\n\nconst cwd = process.cwd();\nconst comparisonOne = path.join(cwd, 'develop');\nconst comparisonTwo = path.join(cwd, 'master');\n\nfunction checkPathsAreDirectories(...paths: string[]): Promise<any> {\n    return new Promise((resolve, reject) => {\n        Promise.map(paths, (path: string) => {\n            return fs.statAsync(path)\n                .then((stat: any) => stat.isDirectory())\n                .catch((error: any) => {\n                    if (error.code == 'ENOENT') {\n                        return false; // File / folder doesn't exist fall back to then validation\n                    }\n                    reject(error); // If an error occured we reject\n                });\n        })\n        .then((validation: boolean[]) => {\n            let failureIndex: number = validation.indexOf(false);\n            if (failureIndex !== -1) {\n                reject(`${paths[failureIndex]} is not a directory`)\n            } else {\n                resolve(paths)\n            }\n        })\n    })\n}\n\n// Check [cwd, 1 compare, 2 compare] are directories\ncheckPathsAreDirectories(cwd, comparisonOne, comparisonTwo)\n    .then((paths: string) => {\n        // Map through files in 1 compare\n        // Check it exists in 2 compare\n        // Compare image 1 and 2\n        console.log(paths);\n    })\n    .catch((error) => {\n        console.log(error);\n    });\n\n\n\n\n\n\n\n\n\n\n\n\n\n// screenshot master https://www.google.com/ copy https://dev.google.com/ test https://test.google.com/\n\n\n// const environments: environmentsInterface = {\n//     'master': 'https://www.serentipi.co.uk',\n//     'develop': 'https://www.serentipi.co.uk',\n//     'test': 'https://www.serentipi.co.uk'\n// }\n\n// // Crawl first domain get back list of paths\n\n// const paths: string[] = [\n//     '/',\n//     '/contact/',\n//     '/home',\n//     '/your-event/',\n//     '/weddings/',\n//     '/corporate/',\n//     '/private-functions/',\n//     '/our-story',\n//     '/gallery/',\n//     '/friends-venues/',\n//     '/open-days/',\n//     '/quote-me/'\n// ]\n\n// // Chunk paths \n\n// const chunks: string[][] = chunk(paths, 6);\n\n// // loop through each chunk add it to a file `chunk-{index}.json` then for each environment run screenshot:\n\n// Promise.map(chunks, (chunk: string[], index: number): Promise<string> => {\n//     let filename: string = `chunk-${index}.json`;\n//     return writeChunkToFile(filename, JSON.stringify(chunk))\n//         .then((chunkFilename: string) => multiShot(environments, chunkFilename))\n//         .then((chunkFilename: string) => fs.unlinkAsync(chunkFilename))\n// }, {concurrency: 6})\n//     .catch((error: any) => {\n//         console.log(error)\n//     })\n"]}