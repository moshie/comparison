{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;AAEA,mCAAoC;AAEpC,6DAAoD;AACpD,2CAAoC;AACpC,iCAA2B;AAC3B,6EAAoE;AACpE,yDAAkD;AAClD,mEAA2D;AAE3D,2BAA4B;AAC5B,kCAAmC;AACnC,+BAAgC;AAChC,IAAM,EAAE,GAAQ,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC,CAAA;AAChD,IAAM,OAAO,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC;AAOnD,2CAAkD;AAClD,iEAA0D;AAE1D,OAAO;KACF,OAAO,CAAC,OAAO,CAAC;KAChB,OAAO,CAAC,0BAA0B,CAAC;KACnC,SAAS,CAAC,cAAc,CAAC;KACzB,MAAM,CAAC,UAAU,OAAiB;IAC/B,kCAAqB,CAAC,OAAO,CAAC,CAAA;IAC9B,IAAM,YAAY,GAA0B,+BAAoB,CAAC,OAAO,CAAC,CAAA;IAEzE,IAAM,KAAK,GAAa;QACpB,EAAE;QACF,YAAY;QACZ,eAAe;QACf,oBAAoB;QACpB,2BAA2B;QAC3B,6CAA6C;QAC7C,iDAAiD;QACjD,+CAA+C;QAC/C,sDAAsD;QACtD,2CAA2C;QAC3C,8BAA8B;QAC9B,uCAAuC;QACvC,cAAc;QACd,SAAS;QACT,kBAAkB;QAClB,gBAAgB;QAChB,wBAAwB;QACxB,mBAAmB;QACnB,aAAa;QACb,4BAA4B;KAC/B,CAAA;IAID,IAAM,MAAM,GAAe,eAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAI3C,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,UAAC,KAAe,EAAE,KAAa;QAC/C,IAAI,QAAQ,GAAW,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,WAAS,KAAK,UAAO,CAAC,CAAC;QACnE,MAAM,CAAC,6BAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;aACnD,IAAI,CAAC,UAAC,aAAqB,IAAK,OAAA,oBAAS,CAAC,YAAY,EAAE,aAAa,CAAC,EAAtC,CAAsC,CAAC;aACvE,IAAI,CAAC,UAAC,aAAqB,IAAK,OAAA,EAAE,CAAC,WAAW,CAAC,aAAa,CAAC,EAA7B,CAA6B,CAAC,CAAA;IACvE,CAAC,EAAE,EAAC,WAAW,EAAE,CAAC,EAAC,CAAC;SACf,KAAK,CAAC,UAAC,KAAU;QACd,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;IACtB,CAAC,CAAC,CAAA;AACV,CAAC,CAAC,CAAA;AAKF,OAAO;KACF,OAAO,CAAC,iCAAiC,CAAC;KAC1C,MAAM,CAAC,UAAU,QAAQ,EAAE,UAAU;IAClC,IAAM,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;IAC1B,IAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IAC/C,IAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;IAEjD,qCAAwB,CAAC,aAAa,EAAE,aAAa,CAAC;SACjD,IAAI,CAAC,cAAM,OAAA,gCAAoB,CAAC,aAAa,EAAE,aAAa,CAAC,EAAlD,CAAkD,CAAC;SAC9D,IAAI,CAAC,cAAM,OAAA,2BAAgB,CAAC,aAAa,EAAE,aAAa,CAAC,EAA9C,CAA8C,CAAC;SAC1D,KAAK,CAAC,UAAC,KAAK;QACT,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACvB,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAA;AAGV,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC","sourcesContent":["#!/usr/bin/env node\n\nimport * as program from 'commander'\nimport {environmentsInterface} from './environments-interface'\nimport writeChunkToFile from './write-chunk-to-file'\nimport multiShot from './multi-shot'\nimport chunk from './chunk'\nimport checkPathsAreDirectories from './check-paths-are-directories'\nimport folderComparison from './folder-comparison'\nimport makeComparisonFolder from './make-comparison-folder'\n\nimport * as path from 'path'\nimport * as Promise from 'bluebird'\nimport * as fileSystem from 'fs'\nconst fs: any = Promise.promisifyAll(fileSystem)\nconst version = require('../package.json').version;\n\n// `shutter screenshots master=https://google.com development=https://dev.google.com test=https://test.google.com —config=~/config.yaml` <- config for predefined paths & other stuff\n\n\n\n\nimport {screenShotsValidation} from './validation'\nimport sanitizeEnvironments from './sanitize-environments'\n\nprogram\n    .version(version)\n    .command('screenshots [domains...]')\n    .arguments('-c, --config')\n    .action(function (domains: string[]) {\n        screenShotsValidation(domains)\n        const environments: environmentsInterface = sanitizeEnvironments(domains)\n\n        const paths: string[] = [\n            '',\n            'contact-us',\n            'why-choose-us',\n            'why-choose-us/faqs',\n            'product-category/printing',\n            'product-category/litho-and-digital-printing',\n            'product-category/printing/large-format-printing',\n            'product-category/printing/business-stationery',\n            'product-category/printing/brochure-printing-services',\n            'product-category/printing/print-processes',\n            'product-category/print-sizes',\n            'product-category/promotional-products',\n            'branded-pens',\n            'artwork',\n            'office-furniture',\n            'signs-displays',\n            'exhibition-stand-ideas',\n            'exhibition-stands',\n            'exhibitions',\n            'exhibitions/pop-up-banners'\n        ]\n\n        // Chunk paths \n\n        const chunks: string[][] = chunk(paths, 6);\n\n        // loop through each chunk add it to a file `chunk-{index}.json` then for each environment run screenshot:\n\n        Promise.map(chunks, (chunk: string[], index: number): Promise<string> => {\n            let filename: string = path.join(__dirname, `chunk-${index}.json`);\n            return writeChunkToFile(filename, JSON.stringify(chunk))\n                .then((chunkFilename: string) => multiShot(environments, chunkFilename))\n                .then((chunkFilename: string) => fs.unlinkAsync(chunkFilename))\n        }, {concurrency: 6})\n            .catch((error: any) => {\n                console.log(error)\n            })\n    })\n\n    // `shutter compare master development` <— will compare “prescreenshoted” sites\n    // `shutter compare https://google.com https://dev.google.com` <— will crawl site, take screenshots then compare them\n\n    program\n        .command('compare <original> <comparison>')\n        .action(function (original, comparison) {\n            const cwd = process.cwd();\n            const comparisonOne = path.join(cwd, original);\n            const comparisonTwo = path.join(cwd, comparison);\n\n            checkPathsAreDirectories(comparisonOne, comparisonTwo)\n                .then(() => makeComparisonFolder(comparisonOne, comparisonTwo))\n                .then(() => folderComparison(comparisonOne, comparisonTwo))\n                .catch((error) => {\n                    console.log(error);\n                });\n        })\n\n\nprogram.parse(process.argv);\n\n\n// compare copy master\n\n// CLI Validation must supply 2 paths to compare!\n\n\n\n\n\n\n\n\n"]}