{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\n// Vendor\nimport * as path from 'path'\nimport * as chalk from 'chalk'\nimport * as Promise from 'bluebird'\nimport * as program from 'commander'\n\n// Internal\nimport crawl from './crawl'\nimport validator from './validator'\nimport screenshotChunk from './screenshot-chunk'\nimport compareDirectories from './compare-directories'\nimport sanitizeEnvironments from './sanitize-environments'\nimport {environmentsInterface} from './environments-interface'\n\n// Misc\nconst version = require('../package').version\n\nprogram\n    .version(version)\n    .command('screenshots [environments...]')\n    .description('Render screenshots of web pages')\n    .arguments('-c, --config')\n    .action(function (environments: string[]) {\n\n    \t// Validation\n    \ttry {\n\t\t\tvalidator(environments)\n\t\t} catch (error) {\n\t\t\tconsole.log(`\\n${chalk.red('Error:')} ${error.message}\\n`)\n\t\t\tprocess.exit(1)\n\t\t}\n\n\t\t// Sanitize\n        const sanitizedEnvironments: environmentsInterface = sanitizeEnvironments(environments)\n\n        // Crawl -> Screenshot\n    \tcrawl(sanitizedEnvironments)\n    \t\t.map((chunk: string[], index: number): Promise<string> => {\n\t            return screenshotChunk(sanitizedEnvironments, chunk, index)\n\t        }, {concurrency: 6})\n\t            .catch((error: Error) => {\n\t                console.log(`${chalk.red('Error:')} ${error.message}`)\n\t            })\n    })\n\n    // `shutter compare master development` <— will compare “prescreenshoted” sites\n    // `shutter compare https://google.com https://dev.google.com` <— will crawl site, take screenshots then compare them\n\n\n\n    function isUrl(path: string): boolean {\n    \t// TODO: make this work!\n    }\n\n\n    program\n        .command('compare <original> <comparison>')\n        .action(function (original, comparison) {\n\n        \tlet cwd = process.cwd()\n        \tlet comparisonOne = path.join(cwd, original)\n            let comparisonTwo = path.join(cwd, comparison)\n\n        \tif (isUrl(original) && isUrl(comparison)) {\n\n        \t\tcomparisonOne = path.join(cwd, 'original')\n            \tcomparisonTwo = path.join(cwd, 'comparison')\n\n        \t\tvar domains = [`original=${original}`, `comparison=${comparison}`]\n\n        \t\ttry {\n\t\t\t\t\tvalidator(domains)\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.log(`${chalk.red('Error')}: ${error.message}`)\n\t\t\t\t}\n\n\t\t\t\tconst environments: environmentsInterface = sanitizeEnvironments(domains)\n        \t\t\n\t\t\t\tcrawl(environments)\n\t\t    \t\t.map((chunk: string[], index: number) => {\n\t\t    \t\t\treturn screenshotChunk(environments, chunk, index)\n\t\t    \t\t}, {concurrency: 6})\n\t\t    \t\t.then(() => compareDirectories(comparisonOne, comparisonTwo))\n\t\t    \t\t.catch((error: any) => {\n\t\t                console.log(`${chalk.red('Error:')} ${error}`)\n\t\t            })\n\n\t    \t\treturn\n        \t}\n\n      \t\tcompareDirectories(comparisonOne, comparisonTwo)\n                .catch((error: string) => {\n                    console.log(`${chalk.red('Error:')} ${error}`)\n                    process.exit(1)\n                }) \t\t\n\n        })\n\n\nprogram.parse(process.argv)"]}