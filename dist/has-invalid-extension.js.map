{"version":3,"file":"has-invalid-extension.js","sourceRoot":"","sources":["../src/has-invalid-extension.ts"],"names":[],"mappings":";;AAAA,IAAM,SAAS,GAAa;IACxB,MAAM;IACN,KAAK;IACL,OAAO;IACP,OAAO;IAEP,KAAK;IACL,MAAM;IACN,MAAM;IACN,OAAO;IAEP,KAAK;IACL,MAAM;IACN,KAAK;IACL,MAAM;IACN,MAAM;IAEN,OAAO;IACP,OAAO;IACP,KAAK;CACR,CAAA;AAED,IAAM,SAAS,GAAW,IAAI,MAAM,CAAC,iBAAiB,CAAC,CAAA;AAEvD,6BAA6B,IAAY;IACrC,IAAI,OAAO,GAAkB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IACjD,MAAM,CAAC,OAAO,KAAK,IAAI,IAAI,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAA;AACnE,CAAC;AAED,kBAAe,mBAAmB,CAAA","sourcesContent":["const whiteList: string[] = [\n    'html',\n    'htm',\n    'xhtml',\n    'jhtml',\n\n    'php',\n    'php3',\n    'php4',\n    'phtml',\n\n    'asp',\n    'aspx',\n    'axd',\n    'asmx',\n    'ashx',\n\n    'rhtml',\n    'shtml',\n    'xml'\n]\n\nconst extension: RegExp = new RegExp('(?:\\.([a-z]+))$')\n\nfunction hasInvalidExtension(href: string): boolean {\n    let matches: string[]|null = extension.exec(href)\n    return matches !== null && whiteList.indexOf(matches[1]) === -1\n}\n\nexport default hasInvalidExtension"]}