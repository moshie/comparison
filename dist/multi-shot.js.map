{"version":3,"file":"multi-shot.js","sourceRoot":"","sources":["../src/multi-shot.ts"],"names":[],"mappings":";;AACA,2CAAqC;AACrC,kCAAmC;AACnC,+BAAgC;AAEhC,IAAM,EAAE,GAAQ,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC,CAAA;AAEhD,mBAAmB,YAAmC,EAAE,aAAqB;IAC5E,IAAI,QAAQ,GAAwB,EAAE,CAAA;IACtC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,UAAC,GAAW;QAE7C,QAAQ,CAAC,IAAI,CACZ,oBAAU,CAAC,aAAa,EAAE,YAAY,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CACjD,CAAA;IACF,CAAC,CAAC,CAAA;IAEF,MAAM,CAAC,OAAO,CAAC,IAAI,OAAZ,OAAO,EAAS,QAAQ,EAC7B,IAAI,CAAC,cAAM,OAAA,aAAa,EAAb,CAAa,CAAC;SACzB,KAAK,CAAC,UAAC,MAAW;QAClB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;IACpB,CAAC,CAAC,CAAA;AACJ,CAAC;AAED,kBAAe,SAAS,CAAA","sourcesContent":["import {environmentsInterface} from './environments-interface'\nimport screenshot from './screenshot'\nimport * as Promise from 'bluebird'\nimport * as fileSystem from 'fs'\n\nconst fs: any = Promise.promisifyAll(fileSystem)\n\nfunction multiShot(environments: environmentsInterface, chunkFilename: string): Promise<string> {\n\tvar promises: Promise<string[]>[] = []\n\tObject.keys(environments).forEach((env: string) => {\n\t\t// Scope is important here!\n\t\tpromises.push(\n\t\t\tscreenshot(chunkFilename, environments[env], env)\n\t\t)\n\t})\n\n\treturn Promise.join(...promises)\n\t\t.then(() => chunkFilename)\n\t\t.catch((errors: any) => {\n\t\t\tconsole.log(errors)\n\t\t})\n}\n\nexport default multiShot"]}