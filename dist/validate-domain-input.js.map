{"version":3,"file":"validate-domain-input.js","sourceRoot":"","sources":["../src/validate-domain-input.ts"],"names":[],"mappings":";;AAAA,6BAAuB;AAEvB,6DAAqD;AAGrD,oBAAoB,OAAsB;IAAtB,wBAAA,EAAA,YAAsB;IACtC,MAAM,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,GAAG,KAAK,GAAG,IAAI,CAAA;AAC7C,CAAC;AAED,yBAAyB,MAAmB;IAAnB,uBAAA,EAAA,WAAmB;IACxC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAA;AACrC,CAAC;AAID,+BAA+B,MAAmB;IAAnB,uBAAA,EAAA,WAAmB;IAC1C,IAAA,sBAAsC,EAArC,mBAAW,EAAE,WAAG,CAAqB;IAC1C,MAAM,CAAC,CAAC,WAAW,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAA;AAChD,CAAC;AAED,+BAA+B,MAAmB;IAAnB,uBAAA,EAAA,WAAmB;IAC1C,IAAA,sBAAsC,EAArC,mBAAW,EAAE,WAAG,CAAqB;IAC1C,IAAI,YAAY,GAAG,qBAAqB,CAAC;IACzC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;AACzC,CAAC;AAED,2BAA2B,MAAmB;IAAnB,uBAAA,EAAA,WAAmB;IAC1C,IAAI,GAAG,GAAG,6BAAiB,CAAC,MAAM,CAAC,CAAA;IACnC,MAAM,CAAC,GAAG,CAAC,QAAQ,KAAK,IAAI,IAAI,GAAG,CAAC,QAAQ,KAAK,GAAG,CAAA;AACxD,CAAC;AAED,6BAA6B,OAAsB;IAAtB,wBAAA,EAAA,YAAsB;IAC/C,IAAM,GAAG,GAAQ,IAAI,aAAG,CAAC,kBAAkB,CAAC,CAAC;IAE7C,EAAE,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;QAChB,GAAG,CAAC,GAAG,CAAC,6EAA6E,CAAC,CAAC;QACvF,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IAED,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;QAC3C,IAAI,QAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAA;QAEvB,EAAE,CAAC,CAAC,eAAe,CAAC,QAAM,CAAC,CAAC,CAAC,CAAC;YAC1B,GAAG,CAAC,GAAG,CAAC,mCAAiC,OAAO,CAAC,CAAC,CAAC,uCAAoC,CAAC,CAAA;YACxF,QAAQ,CAAA;QACZ,CAAC;QAED,EAAE,CAAC,CAAC,qBAAqB,CAAC,QAAM,CAAC,CAAC,CAAC,CAAC;YAChC,GAAG,CAAC,GAAG,CAAC,oCAAiC,QAAM,OAAG,CAAC,CAAA;QACvD,CAAC;QAED,EAAE,CAAC,CAAC,qBAAqB,CAAC,QAAM,CAAC,CAAC,CAAC,CAAC;YAChC,GAAG,CAAC,GAAG,CAAC,2CAAwC,QAAM,OAAG,CAAC,CAAA;QAC9D,CAAC;QAED,EAAE,CAAC,CAAC,iBAAiB,CAAC,QAAM,CAAC,CAAC,CAAC,CAAC;YAC5B,GAAG,CAAC,GAAG,CAAC,gCAA8B,QAAQ,CAAC,CAAA;QACnD,CAAC;IACL,CAAC;IAED,MAAM,CAAC,GAAG,CAAA;AACd,CAAC;AAED,kBAAe,mBAAmB,CAAA","sourcesContent":["import Bag from './bag'\nimport handleErrorBag from './handle-error-bag'\nimport checkShorthandUrl from './check-shorthand-url'\n\n\nfunction hasDomains(domains: string[] = []): boolean {\n    return domains.length == 0 ? false : true\n}\n\nfunction domainIsInvalid(domain: string = ''): boolean {\n    return domain.indexOf('=') === -1\n}\n\n\n\nfunction isEnvironmentProvided(domain: string = ''): boolean {\n    let [environment, url] = domain.split('=')\n    return !environment.length || !domain.length\n}\n\nfunction environmentHasSymbols(domain: string = ''): boolean {\n    let [environment, url] = domain.split('=')\n    let symbolsRegex = /[!-/ :-@ \\[-` {-~]/g;\n    return symbolsRegex.test(environment)\n}\n\nfunction domainHasPathname(domain: string = ''): boolean {\n    let url = checkShorthandUrl(domain)\n    return url.pathname !== null && url.pathname !== '/'\n}\n\nfunction validateDomainInput(domains: string[] = []): Bag {\n    const bag: Bag = new Bag('Validation Error');\n\n    if (!hasDomains()) {\n        bag.add('Please specify environments to screenshot e.g. master=http://www.google.com');\n        return bag;\n    }\n    \n    for (let i = domains.length - 1; i >= 0; i--) {\n        let domain = domains[i]\n\n        if (domainIsInvalid(domain)) {\n            bag.add(`Please specify the domain for ${domains[i]} e.g. master=http://www.google.com`)\n            continue\n        }\n\n        if (isEnvironmentProvided(domain)) {\n            bag.add(`Invalid Environment provided \"${domain}\"`)\n        }\n\n        if (environmentHasSymbols(domain)) {\n            bag.add(`Environment cannot contain symbols! \"${domain}\"`)\n        }\n\n        if (domainHasPathname(domain)) {\n            bag.add(`Pathnames not supported in ${domain}`)\n        }\n    }\n\n    return bag\n}\n\nexport default validateDomainInput"]}